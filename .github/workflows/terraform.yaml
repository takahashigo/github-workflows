name: "Terraform"

on:
  push:
    branches:
      - main
    paths:
      - "terraform/**"
  pull_request:
    branches:
      - main
    paths:
      - "terraform/**"

env:
  # GCP
  REGION: europe-west1 # Update this to your desired region
  GCP_PROJECT_ID: your-gcp-project-id # Update this with your GCP project ID
  GCP_POOL_ID: your-pool-id # Update this with your Workload Identity Pool ID
  GCP_PROVIDER_ID: your-provider-id # Update this with your Workload Identity Provider ID
  GCP_SERVICE_ACCOUNT: your-service_account # Update this with your service account mail address

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  terraform:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup tfcmt
        env:
          TFCMT_VERSION: v4.0.0
        run: |
          wget "https://github.com/suzuki-shunsuke/tfcmt/releases/download/${TFCMT_VERSION}/tfcmt_linux_amd64.tar.gz" -O /tmp/tfcmt.tar.gz
          tar xzf /tmp/tfcmt.tar.gz -C /tmp
          mv /tmp/tfcmt /usr/local/bin
          tfcmt --version

      # - name: Set up Google Cloud SDK
      #   uses: google-github-actions/setup-gcloud@v0.3.0
      #   with:
      #     project_id: ${{ env.GCP_PROJECT_ID }}
      #     version: "latest"

      - name: Authenticate with OIDC
        uses: google-github-actions/auth@v0.4.0
        with:
          workload_identity_provider: "projects/${{ env.GCP_PROJECT_ID }}/locations/global/workloadIdentityPools/${{ env.GCP_POOL_ID }}/providers/${{ env.GCP_PROVIDER_ID }}"
          service_account: "${{ env.GCP_SERVICE_ACCOUNT }}"

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: tfcmt plan -patch -- terraform plan -no-color -input=false

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: tfcmt apply -- terraform apply -auto-approve -input=false
